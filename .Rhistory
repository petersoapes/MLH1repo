two_group_ranges <- transform(two_groups, category2 = reorder(category2, rank(IFD)))
two_group_ranges <- transform(IFD_nMLH1, category2 = factor(paste(unique_biv_name, IFD)))
two_group_ranges <- transform(two_group_ranges, category2 = reorder(category2, rank(IFD)))
F2_rank_dist <-  ggplot(two_group_ranges, aes(ANIMAL_ID, IFD)) +
geom_bar(aes(fill= as.factor(Cross.x)), stat = "identity") +
scale_fill_manual(values=c("#00BFC4", "#7CAE00", "#F8766D", "#FFCC66"))
F2_rank_dist
F2_rank_dist <-  ggplot(two_group_ranges, aes(ANIMAL_ID, IFD)) +
geom_boxplot(aes(fill= as.factor(Cross.x)), stat = "identity") +
scale_fill_manual(values=c("#00BFC4", "#7CAE00", "#F8766D", "#FFCC66"))
F2_rank_dist
F2_rank_dist <-  ggplot(two_group_ranges, aes(ANIMAL_ID, IFD)) +
geom_boxplot(data = two_group_ranges, aes(fill = factor(Cross.x) ) )
F2_rank_dist
range(IFD_n'')
range(IFD_nMLH1$IFD)
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean = mean(IFD),
min = min(IFD),
max = max(IFD),
var= var(IFD)
)
F2_table
rr <- ggplot(F2_table, aes(ANIMAL_ID))
rr + geom_linerange(aes(ymin = min, ymax =max))
rr
rr <- ggplot(F2_table, aes(ANIMAL_ID, IFD))
rr + geom_linerange(aes(ymin = min, ymax =max))
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean))
rr + geom_linerange(aes(ymin = min, ymax =max))
rr
F2_table
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean))
rr + geom_linerange(aes(ymin = min, ymax =max))
rr
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
rr
F2_table <- F2_table[order(min),]
F2_table <- F2_table[order(F2_table$min),]
F2_table
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
rr
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table
F2_table <- F2_table[order(F2_table$min),]
F2_table
F2_table <- F2_table[order(F2_table$range),]
F2_table
two_group_ranges <- transform(F2_table, category2 = factor(paste(ANIMAL_ID, IFD)))
two_group_ranges <- transform(F2_table, category2 = factor(paste(ANIMAL_ID, range)))
two_group_ranges <- transform(F2_table, category2 = factor(paste(ANIMAL_ID, range)))
two_group_ranges <- transform(two_group_ranges, category2 = reorder(category2, rank(range)))
rr <- ggplot(two_group_ranges, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
rr
str(F2_table)
order.range <- order(F2_table$range)
F2_table[order.range, ]
F2_table[order.range, ]
F2_table<- F2_table[order.range, ]
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
rr
F2_table
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -range), y = range)) +
geom_bar(stat = "identity")
p2
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -range), y = range)) +
geom_linerange(aes(ymin = min, ymax =max))
p2
p2
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = IFD)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm
p2
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
IFD_bxplt <- boxplot( x=(IFD_nMLH1$ANIMAL_ID), y = IFD_nMLH1$IFD, main= "IFD distributions")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
P0_IFD_bxplt <- F0_IFD_bxplt + facet_wrap(~ Cross.x, scales="free")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
#IFD_nMLH1$unique_biv_name <- do.call(paste, #c(IFD_nMLH1[c("file_name","ANIMAL_ID", "Slide_ID", "CellNumber", #"Biv.ID")], sep = "_"))
#TODO rank the ranges or min
#1) create a unique id for each row
#2) make the ranked categories
#make F2 mouse data table (with min and max)
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table <- F2_table[order(F2_table$range),]
order.range <- order(F2_table$range)
F2_table<- F2_table[order.range, ]
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("plot of range") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) +ggtitle("Minimum values") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
mm
#remove bottome axis label
#I wish I could rank the min, and the variance to better display the ranges
vv <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, var), y = mean)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("F2 variation in IFD ranges") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
vv
BDmouseBivClass_proportions
BDmouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = length(nMLH1_foci),
biv0CO =  mean( (as.numeric(nChrWithoutXO) ) ) / nCells,
biv1CO =  mean( (as.numeric(nChrWith1XO) ) ) / nCells ,
biv2CO =  mean( (as.numeric(nChrWith2XO) ) ) / nCells ,
biv3CO =  mean( (as.numeric(nChrWith3.XO) ) )/ nCells
)
BDmouseBivClass_proportions
P0 <- IFD_nMLH1[(IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table
F2
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
View(F2)
F2_table <- ddply(F2, .(Animal.ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
library(knitr)
library(ggplot2)
library(plyr)
library(lattice)
library(dplyr)
load(file="MLH1_data_setup.RData")
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
##FIX ORDER HERE (this should be put in the data setup script)
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
#Add fake CAST female data
last_row <-data.frame(file.name=c("12dec18_20dec20_CAST_f1_sp1_12_1_rev.tif", "12dec18_20dec20_CAST_f1_sp1_12_2_rev.tif"), Random.Name = c("1234567.tif","123456789.tif"), quality=c(1,1),nMLH1.foci =c(25,22), XY.paired =c("no","no"), REDO.crop =c("no","no"),n =c(20,20), achiasmate=c(0,0),asynased=c(0,0),notes=c("",""),category = c("CAST female","CAST female"), strain= c("CAST","CAST"), sex=c("female","female"),adj_nMLH1.foci=c(25,22),mouse=c("20dec20_CAST_f1","20dec20_CAST_f1") )
MLH1_data <- rbind(MLH1_data, last_row)
#count the non-quality measures,  #remove non qualit
#length(MLH1_data[ !(is.na(MLH1_data$quality) | MLH1_data$quality==""), ] )  #15 rows with out quality scores, remove.
MLH1_data <- MLH1_data[ !(is.na(MLH1_data$quality) | MLH1_data$quality==""), ]
MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
#this table is saved in the .RData file
#use kable to make tables. warning this might not work for github Rmd.
kable(AP_strain_table)
colnms = c("mouse", "rep")
permut.mouse.numb <- function(x, rep_size, samp_size){
new.df = matrix(nrow=rep_size, ncol=samp_size)
for(i in 1:rep_size) {
new.df[i,] = sample(x, samp_size)
}
return(as.data.frame(new.df, colnames(colnms) ) )
}
permut.mouse.numb
ply_data <- df.pasd.mice[df.pasd.mice$mouse == "8oct14_PWD_f8",]
df.pasd.mice <- MLH1_data[MLH1_data$mouse %in% listOmice, ]
listOmice <- q_cutoff_table$mouse[ (q_cutoff_table$total >= 25) ]
```{r, passing mice, echo=FALSE}
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(adj_nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
above5 = sum(as.numeric(quality) <= 4, na.rm = TRUE )
# q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
#q_cutoff_table
passed_mice <- as.vector(q_cutoff_table[q_cutoff_table$above5 > 15,]$mouse)
not_passed <- as.vector(unique(MLH1_data[!(unique(MLH1_data$mouse) %in% passed_mice),]$mouse) )
#mnake dataframe with just passing mice -- so that it can be ploted
passed_mice_df <- MLH1_data[ (as.numeric(MLH1_data$quality) < 5), ]
ply_data <- df.pasd.mice[df.pasd.mice$mouse == "8oct14_PWD_f8",]
df.pasd.mice <- MLH1_data[MLH1_data$mouse %in% listOmice, ]
listOmice <- q_cutoff_table$mouse[ (q_cutoff_table$total >= 25) ]
df.pasd.mice <- MLH1_data[MLH1_data$mouse %in% listOmice, ]
permut.df <- function(df){
#semperate by mouse
mouse.data    <- ddply(df, c("mouse"), summarise,
df <- data.frame(
samp = sample(nMLH1.foci,5)
)
)
return(mouse.data)
}
mouse.data <- ddply(df.pasd.mice, c("mouse"), summarise,
m.df <- data.frame(sample(nMLH1.foci, 5, replace = FALSE) )
)
this =ddply (df.pasd.mice, .(mouse), subset, sample(seq_along(nMLH1.foci)<=5))
this
ss <- sample(df.pasd.mice$nMLH1.foci)
ss
hundred <- function(x){
plist=data.frame(pv=as.numeric(), mean1=as.numeric(), mean2=as.numeric())
for(eye in 1:100){
samp1 = sample(x, 5)
samp2 = sample(x, 5)
plist$pv[eye] <- t.test(samp1,samp2)$p.value
plist$mean1[eye] <- mean(samp1)
plist$mean2[eye] <- mean(samp2)
}
return(plist)
}
mm <- hundred(ply_data$nMLH1.foci)
ply_data <- df.pasd.mice[df.pasd.mice$mouse == "8oct14_PWD_f8",]
hundred <- function(x){
plist=data.frame(pv=as.numeric(), mean1=as.numeric(), mean2=as.numeric())
for(eye in 1:100){
samp1 = sample(x, 5)
samp2 = sample(x, 5)
plist$pv[eye] <- t.test(samp1,samp2)$p.value
plist$mean1[eye] <- mean(samp1)
plist$mean2[eye] <- mean(samp2)
}
return(plist)
}
mm <- hundred(ply_data$nMLH1.foci)
vv <-permut.mouse.numb(df.pasd.mice$nMLH1.foci,5,2)
vv
vv <-permut.mouse.numb(df.pasd.mice$nMLH1.foci,5,4)
vv
kk<-dlply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,5) )
kk
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 10
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,10) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 10
bb
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
jj
jj
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 10
bb
bb[bb$V1 < 0.05]
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,10) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,10) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
jj<-ddply(df.pasd.mice, .(mouse), function(x) permut.mouse.numb(x$nMLH1.foci,2,20) )
bb <-ddply(jj, .(mouse), function(x) t.test(x[1,2:5],x[2,2:5])$p.value )#t.test for 2 samples of size 20
bb$mouse[(bb$V1 < 0.05)]
bb
length(jj)
jj
repeats = 10
new.p.matrix = matrix(nrow=length(unique(jj$mouse)), ncol=repeats)
powrange <- seq(0.4, .9, .1)
powrange <- seq(0.4, .9, .1)
n <- sapply(powrange, function(i) power.prop.test(p1=0.4,p2=0.24,power=i,sig.level=0.05)$n)
powrange <- seq(0.4, .9, .1)
n <- sapply(powrange, function(i) power.prop.test(p1=0.4,p2=0.24,power=i,sig.level=0.05)$n)
plot(n, powrange, type="b",xlab="sample size",ylab="power")
plot(n, powrange, type="b",xlab="sample size",ylab="power")
powrange <- seq(0.4, .9, .1)
n <- sapply(powrange, function(i) power.prop.test(p1=0.4,p2=0.24,power=i,sig.level=0.05)$n)
n
plot(n, powrange, type="b",xlab="sample size",ylab="power")
dev()
dev.off()
plot(n, powrange, type="b",xlab="sample size",ylab="power")
dev.off()
plot(cars)
plot(n, powrange, type="b",xlab="sample size",ylab="power")
plot(n, powrange)
powrange
n
plot(powrange, n)
load(file="MLH1_data_setup.RData")
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
t.test(sample(ply_data$nMLH1.foci, 5), sample(ply_data$nMLH1.foci, 5))$p.value
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return(as.data.frame(new.df, colnames(colnms) ) )
#return sampled
}
jj<-ddply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,2,20) )
passed_mice_df <- MLH1_data[ (as.numeric(MLH1_data$quality) < 5), ]
jj<-ddply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,2,20) )
df.pasd.mice <- MLH1_data[MLH1_data$mouse %in% listOmice, ]
listOmice <- q_cutoff_table$mouse[ (q_cutoff_table$total >= 25) ]
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(adj_nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
above5 = sum(as.numeric(quality) <= 4, na.rm = TRUE )
# q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
passed_mice <- as.vector(q_cutoff_table[q_cutoff_table$above5 > 15,]$mouse)
not_passed <- as.vector(unique(MLH1_data[!(unique(MLH1_data$mouse) %in% passed_mice),]$mouse) )
passed_mice_df <- MLH1_data[ (as.numeric(MLH1_data$quality) < 5), ]
listOmice <- q_cutoff_table$mouse[ (q_cutoff_table$total >= 25) ]
df.pasd.mice <- MLH1_data[MLH1_data$mouse %in% listOmice, ]
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return(as.data.frame(new.df, colnames(colnms) ) )
#return sampled
}
jj<-ddply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,2,20) )
kk<-dlply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,2,5) )
jj<-ddply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,20) )
vv <- permut.mouse.numb(df.pasd.mice$nMLH1.foci,4)
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
vv
jj<-ddply(df.pasd.mice, .(mouse), function(x) resample_df(x$nMLH1.foci,20) )
jj
str(jj)
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
new.df[samp_size+1,i]t.test(new.df[,1], new.df[,2])$pvalue
}
#maybe I want the samples to be returned as lists
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
#maybe I want the samples to be returned as lists
new.df[samp_size+1,i]t.test(new.df[,1], new.df[,2])$pvalue
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
new.df[samp_size+1,i] = t.test(new.df[,1], new.df[,2])$pvalue
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
t.test(MLH1_data$nMLH1.foci, MLH1_data$nMLH1.foci)
t.test(MLH1_data$nMLH1.foci, MLH1_data$nMLH1.foci)$pvalue
t.test(MLH1_data$nMLH1.foci, MLH1_data$nMLH1.foci)$p.value
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
new.df[samp_size+1,i] = t.test(new.df[,1], new.df[,2])$p.value
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return(new.df[samp_size+1,i] = t.test(new.df[,1], new.df[,2])$p.value)
#return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return( t.test(new.df[,1], new.df[,2])$p.value )
#return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
vv
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return( t.test(new.df[,1], new.df[,2])$p.value )
return(as.data.frame(new.df, colnames(colnms) ) )
#return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms = c("mouse", "rep")
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
vv
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )
return( t.test(new.df[,1], new.df[,2])$p.value )
#return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms =
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
vv
resample_df <- function(x, samp_size){
#rep could always be two, since the test is a t.test
new.df = matrix(nrow=2, ncol=samp_size)
for(i in 1:2) {
new.df[i,] = sample(x, samp_size)
}
mmm = list(as.data.frame(new.df, colnames(c("mouse", "rep")) ),  t.test(new.df[,1], new.df[,2])$p.value)
return(mmm )
#return(as.data.frame(new.df, colnames(c("mouse", "rep")) ) )#colnms =
#return sampled
}
vv <- resample_df(df.pasd.mice$nMLH1.foci,4)
vv
