ff
#
#scale_fill_brewer(palette="Dark2")
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
View(MLH1_data)
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(strain, sex, category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- with(MLH1_data, MLH1_data[order(strain, sex),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
View(MLH1_data)
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(strain, sex, category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- with(MLH1_data, MLH1_data[order(category),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain), order=strain  )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
MLH1_data <- with(MLH1_data, MLH1_data[order(category, mouse),])
MLH1_data <- MLH1_data %>%
arrange(category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(category, mouse),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(category, mouse),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(category),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
View(MLH1_data)
MLH1_data <- MLH1_data %>%
arrange(category) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(category),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(category) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
MLH1_data <- MLH1_data %>%
arrange(category) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(category),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(strain, sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name,category)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(strain, sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category, strain, sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= as.factor(strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
histM <- ggplot(MLH1_data,(aes(adj_nMLH1.foci))) + xlim(c(16, 38))
histM <- histM + geom_histogram(stat = "bin", binwidth = 1)
histM <- histM + facet_wrap(~ category)
histM
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category, strain, sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey", "black" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(category, strain, sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
MLH1_data <- MLH1_data %>%
arrange(category) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name,Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
MLH1_data <- MLH1_data %>%
arrange(strain,sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name,Original.Name)) #another category that you want the order to match
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
MLH1_data <- with(MLH1_data, MLH1_data[order(strain, sex),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
#scale_fill_brewer(palette="Dark2")
MLH1_data <- MLH1_data %>%
arrange(strain,sex) %>%               # sort your dataframe, by the focal categories
mutate(Original.Name = factor(Original.Name,Original.Name)) #another category that you want the order to match
MLH1_data <- with(MLH1_data, MLH1_data[order(strain, sex),])
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= (strain) )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#the below ordering works!! keep it
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST", "HIM", "SPRET"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#the below ordering works!! keep it
MLH1_data$strain<- factor(MLH1_data$strain, levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST", "HMI", "SPRET"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#the below ordering works!! keep it
MLH1_data$strain<- factor(MLH1_data$strain, levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST","HMI","SPRET", "other"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
#the below ordering works!! keep it
MLH1_data$strain<- factor(MLH1_data$strain, levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST","HMI","SPRET", "other"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
ff
#
ss <- ggplot(MLH1_data, aes(x = as.factor(strain), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "green", "grey" ))
ss <- ss   + facet_wrap(~ sex, scales="free")
ss
k <- MLH1_data[MLH1_data$category == "CAST female",]
k
#TODO, add a line for mouse and strain
#this creates a slot for CAST female, but no data
#each of the indiviual dataframes can be acessed with df_list$ ---- category
# for each sub-data frame, make mouse specific table,
#
#add mouse mean to the df
df_list <- split(MLH1_data, as.factor(MLH1_data$category))
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
df_list <- split(MLH1_data, as.factor(MLH1_data$category))
df_list
str(df_list)
df_list <- split(MLH1_data, (MLH1_data$category))
str(df_list)
df_list <- -c('HMI female')
df_list <- subset(df_list, select = -c(HMI female, CAST female) )
df_list <- subset(df_list, select = -c("HMI female", "CAST female") )
df_list <- subset(df_list, select = -c(df_list$HMI female, df_list$CAST female) )
df_list <- subset(df_list, select = -c(df_list$`HMI female`, df_list$`CAST female`) )
head(df_list$`WSB female`)
head(df_list$`HMI female`)
df_list <- df_list[ -c(df_list$`HMI female`, df_list$`CAST female`) ]
df_list <- df_list[ ,-c(df_list$`HMI female`, df_list$`CAST female`) ]
df_list <- df_list[ ,-c(`HMI female`, `CAST female`) ]
typeof(df_list$`HMI female`)
typeof(df_list$`HMI female`[1,])
typeof(df_list$`HMI female`$Batch)
head(df_list[1])
head(df_list[1][1])
head(df_list[1]$`WSB female`$Batch)
head(df_list[4]$`WSB female`$Batch)
head(df_list[2]$`WSB male`$Batch)
new_df_list <- df_list[ ,-c(7) ]
head(df_list[7]$`PERC male`$Batch)
new_df_list <- df_list[ -c(7) ]
new_df_list <- df_list[ -c(7, 12, 14,16) ]
head(new_df_list)
#TODO, add a line for mouse and strain
#echo=FALSE,message=FALSE, warning=FALSE
#this creates a slot for CAST female, but no data
#each of the indiviual dataframes can be acessed with df_list$ ---- category
# for each sub-data frame, make mouse specific table,
#
#add mouse mean to the df
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
df_list <- split(MLH1_data, (MLH1_data$category))
length(df_list)
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#TODO, add a line for mouse and strain
#echo=FALSE,message=FALSE, warning=FALSE
#this creates a slot for CAST female, but no data
#each of the indiviual dataframes can be acessed with df_list$ ---- category
# for each sub-data frame, make mouse specific table,
#
#add mouse mean to the df
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
