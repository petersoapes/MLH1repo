#example. (variable needs to be a ordered factor)
#MLH1_by_M_mouse <- with(MLH1_by_M_mouse, MLH1_by_M_mouse[order(subsp),])
#load Lynn et al 2002 data. 12 CAST female MLH1 measurements (probably 1 female)
#Lynn_CASTf = c(20,21, 23, 25, 26, 26,26,27.5, 28, 28,28,33)
#load BD's data. Only PWD female and F1 females ()
fullBD_MLH1_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/BD_MLH1data/BD_RecombinationPhenotypes_input.csv")
#unique(fullBD_MLH1_data$Cross)
#subset P0s
BDMLH1_data <- subset(fullBD_MLH1_data, (Cross %in%  c("PANCEVO","RAT","CIM", "PWDFemale", "PWD","Peromyscus",
"CZECHI","PERA", "CAROLI", "CAST", "Microtus", "WSB") ))
#now that I have the mice of Beth's I want, remove the big BD df with F2s to save space.
rm(fullBD_MLH1_data)
Table_BD_mouse <- ddply(BDMLH1_data, c("ANIMAL_ID", "Cross"), summarise,
N  = length(nMLH1_foci),
mean_co = format(round( mean(nMLH1_foci), 3), nsmall = 3),
var = format(round( var(nMLH1_foci),3), nsmall = 3),
sd   = round(sd(nMLH1_foci),3),
se   = round(sd / sqrt(N),3)
#text=paste(Cross, collapse=""))
)
#strain averages
Table_BD_strain <- ddply(BDMLH1_data, c("Cross"), summarise,
Nmice = length(unique(ANIMAL_ID)),
Ncells  = length(nMLH1_foci),
mean_co = format(round (mean(nMLH1_foci), 3), nsmall=3),
var = format(round( var(nMLH1_foci), 3), nsmall=3),
sd   = round( sd(nMLH1_foci), 3),
se   = round(sd / sqrt(Ncells), 3)
#text=paste(Cross, collapse=""))
)#format(round(   var(nMLH1.foci),3), nsmall=3),
#assign subspecies to tables
subsp <- ifelse(grepl("WSB", Table_BD_strain$Cross), "Dom",
ifelse(grepl("G", Table_BD_strain$Cross), "Dom",
ifelse(grepl("LEW", Table_BD_strain$Cross), "Dom",
ifelse(grepl("LEWES", Table_BD_strain$Cross), "Dom",
ifelse(grepl("PERA", Table_BD_strain$Cross), "Dom",
ifelse(grepl("CAST", Table_BD_strain$Cross), "Cast",
ifelse(grepl("CIM", Table_BD_strain$Cross), "Cast",
ifelse(grepl("MSM", Table_BD_strain$Cross), "Musc-Cast",
ifelse(grepl("PWD", Table_BD_strain$Cross), "Musc",
ifelse(grepl("CZECHI", Table_BD_strain$Cross), "Musc",
ifelse(grepl("PWDFemale", Table_BD_strain$Cross), "Musc",
ifelse(grepl("PANCEVO", Table_BD_strain$Cross), "Spic",
ifelse(grepl("CAROLI", Table_BD_strain$Cross), "Caroli",
ifelse(grepl("RAT", Table_BD_strain$Cross), "Outgroup",
ifelse(grepl("Peromyscus", Table_BD_strain$Cross), "Outgroup",
ifelse(grepl("Microtus", Table_BD_strain$Cross), "Outgroup", "other"))))))))))))))))
dataset <- rep("BD", length(Table_BD_strain$Cross) )
#everything should be male unless, 'female' listed in name
sex <- ifelse(grepl("Female", Table_BD_strain$Cross), "female", "male")
Table_BD_strain <- cbind(Table_BD_strain, sex, subsp, dataset)
#change name
Table_BD_strain$Cross[Table_BD_strain$Cross== "PWDFemale"] <- "PWD"
######################
# Setup AP tables #
######################
################
# STRAIN TABLE #
################
#calculate strain averages from mouse averages
AP_strain_table <- ddply(MLH1_data, c("strain", "sex"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(nMLH1.foci),
mean_co = format(round(  mean(nMLH1.foci), 3 ), nsmall=3),
var = format(round(   var(nMLH1.foci),3), nsmall=3),
sd   = round(sd(nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3)
)
subsp <- ifelse(grepl("WSB", AP_strain_table$strain), "Dom",
ifelse(grepl("G", AP_strain_table$strain), "Dom",
ifelse(grepl("LEW", AP_strain_table$strain), "Dom",
ifelse(grepl("LEWES", AP_strain_table$strain), "Dom",
ifelse(grepl("CAST", AP_strain_table$strain), "Cast",
ifelse(grepl("MSM", AP_strain_table$strain), "Musc-Cast",
ifelse(grepl("PWD", AP_strain_table$strain), "Musc", "other")))))))
dataset <- rep("AP", length(AP_strain_table$strain) )
AP_strain_table <- cbind(AP_strain_table, subsp, dataset)
###################
# MERGE data sets # LOAD OTHER DATA
###################
#same number of cols, but in wrong order and named wrong
#change name of Cross
colnames(BD_strain_table)[1] <- "strain"
#reorder
BD_strain_table <- BD_strain_table[c("strain", "sex","Nmice", "Ncells", "mean_co","var", "sd","se", "subsp", "dataset" )]
#add lynn data
Lynn_CASTf_foci = c(20,21, 23, 25, 26, 26,26,27.5, 28, 28,28,33)
cast_f = c("CAST", "female", 1, length(Lynn_CASTf_foci), round(mean(Lynn_CASTf_foci),3), round(var(Lynn_CASTf_foci),3), round(sd(Lynn_CASTf_foci),3),
round(sd(Lynn_CASTf_foci)/sqrt(length(Lynn_CASTf_foci)),3 ), "Cast", as.character("Ln") )
MLH1_data_table <- rbind(AP_strain_table, BD_strain_table, cast_f)#error from dataset thing
#set the order
MLH1_data_table$strain <- factor(MLH1_data_table$strain,
levels =c("G", "LEWES","WSB","PERA",
"PWD","CZECHI", "MSM", "CAST", "CIM",
"PANCEVO", "CAROLI", "RAT","Peromyscus","Microtus"), order=T )
MLH1_data_table$subsp <- factor(MLH1_data_table$subsp,
levels =c( "Dom", "Musc", "Musc-Cast", "Cast",
"Spic", "Caroli","Outgroup", "other" ), order=T )
MLH1_data_table <- with(MLH1_data_table, MLH1_data_table[order(subsp, strain, sex),])
############
# SAVE DFs #
############
save.image("MLH1_data_setup.RData")
#OutPut: big large MLH1_data (AP's) df, big DF of BD with just the mice I want.
# MLH1_data_table, means and variance of AP and BD MLH1 values. made from seperate tables from AP and BD data.
#  make sure decimal places are consistant
save.image("MLH1_data_setup.RData")
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ggplot(MLH1_by_F_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain)))
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour=sex) )
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour=sex) )
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
library(dplyr)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour=sex) )
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour=sex) )
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour=c("black", "red")) )
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), scale_colour_manual(c("black", "red")) )
ggsave("filename_boxplots.png")
MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
ggplot(MLH1_by_F_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain)))
ggsave("Female_boxplots.png")
msm_fem <- ddply(MLH1_by_F_MSM, .(mouse), summarise,
m =  mean(nMLH1.foci)
)
#Quality / number of passing mice
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
q_cutoff_table
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
#make a table of the number of mice passed for each category.
pass_table <- ddply(passed_mice, .(strain, sex), summarise,
passing.mice =  length(mouse)
)
#add non passed mice
setwd("C:/Users/alpeterson7/Documents/MLH1data/Results/")
#write.csv(passed_mice, file = "MLH1_data", fileEncoding = "UTF-16LE")
write.table(pass_table, "pass_table.txt", sep="\t", quote=FALSE, row.name=FALSE)
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), scale_colour_manual(c("black", "red")) ) )
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), scale_colour_manual(values=c("#999999", "#E69F00")) ) )
fill_by_sex =
#save a figure of boxplots for each mouse
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour = sex) )
fill_by_sex =
#save a figure of boxplots for each mouse
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour = factor(sex) ) )
fill_by_sex =
#save a figure of boxplots for each mouse
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), colour = factor(sex) ) )
fill_by_sex =
#save a figure of boxplots for each mouse
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), color = factor(sex) ) )
MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
ggplot(MLH1_by_F_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain) ) )
ggplot(MLH1_by_M_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain) ) )
ggsave("Male_boxplots.png")
ggplot(MLH1_by_M_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain) ) )
ggsave("Male_boxplots.png")
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
q_cutoff_table
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
pass_table <- ddply(passed_mice, .(strain, sex), summarise,
passing.mice =  length(mouse)
)
pass_table
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
Pass_mice_category
setwd("C:/Users/alpeterson7/Documents/MLH1data/Results/")
write.table(pass_table, "pass_table.txt", sep="\t", quote=FALSE, row.name=FALSE)
passed_mice
non_passed_mice <- as.data.frame(!q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
q_cutoff_table
v <- q_cutoff_table[!(q_cutoff_table$mouse %in% passed_mice$mouse)]$mouse
passed_mice
b <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
b
c <- setdiff(passed_mice$mouse, q_cutoff_table$mouse)
c
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
View(non_passed_mice)
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
not_passed_mice
write.table(Pass_mice_category, "Pass_mice_category.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(passed_mice, "Passing_mice.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(not_passed_mice, "Non_Passing_mice.txt", sep="\t", quote=FALSE, row.name=FALSE)
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
write.table(Pass_mice_category, "Pass_mice_category.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(passed_mice, "Passing_mice.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(not_passed_mice, "Non_Passing_mice.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(not_passed_mice, "Non_Passing_mice.csv", sep=",", quote=FALSE, row.name=FALSE)
kable(head(MLH1_data[,1:3]), format = "markdown")
library(knitr) #for md tables
kable(head(MLH1_data[,1:3]), format = "markdown")
Pass_mice_category <- kable(Pass_mice_category, format = "pandoc")
passed_mice <- kable(passed_mice, format = "pandoc")
not_passed_mice <- kable(not_passed_mice, format = "markdown")
colnames(not_passed_mice) <- c("mouse")
not_passed_mice
str(not_passed_mice)
not_passed_mice <- data.frame(setdiff(q_cutoff_table$mouse, passed_mice$mouse) )
not_passed_mice <- data.frame( as.list(setdiff(q_cutoff_table$mouse, passed_mice$mouse) ) )
not_passed_mice <- data.frame( as.list(setdiff(q_cutoff_table$mouse, passed_mice$mouse) ) )
not_passed_mice <- data.frame(not_passed_mice)
colnames(not_passed_mice) <- c("mouse")
not_passed_mice <- kable(not_passed_mice, format = "markdown")
write.table(Pass_mice_category, "Pass_mice_category.md", sep="\t", quote=FALSE, row.name=FALSE)
write.table(passed_mice, "Passing_mice.txt", sep="\t", quote=FALSE, row.name=FALSE)
write.table(not_passed_mice, "Non_Passing_mice.txt", quote=FALSE, row.name=FALSE)
passed_mice
not_passed_mice
str(not_passed_mice)
write.csv(Pass_mice_category, "Pass_mice_category", sep="\t", quote=FALSE, row.name=FALSE)
write.csv(Pass_mice_category, "Pass_mice_category",quote=FALSE, row.name=FALSE)
write.csv(Pass_mice_category, "Pass_mice_category")
paste(file_path_sans_ext(Pass_mice_category), '.md', sep = '')
str(passed_mice)
pander(passed_mice)
library(pander)
install.packages("pander")
library(pander)
pander(passed_mice)
save(passed_mice, "Passing_mice.txt")
save(passed_mice, file="Passing_mice.txt")
save(passed_mice, file="Passing_mice.md")
save(passed_mice, file="Passing_mice.md", ascii=TRUE)
save(not_passed_mice, file="Passing_mice.md", ascii=TRUE)
save(not_passed_mice, file="Non_Passing_mice.md", ascii=TRUE)
Pass_mice_category <- kable(Pass_mice_category, format = "markdown")
passed_mice <- kable(passed_mice, format = "markdown")
Pass_mice_category <- kable(Pass_mice_category, format = "markdown")
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
rm(Pass_mice_category)
rm(passed_mice)
rm(not_passed_mice)
Pass_mice_category <- kable(Pass_mice_category, format = "markdown")
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
not_passed_mice <- data.frame(not_passed_mice)
colnames(not_passed_mice) <- c("mouse")
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
Pass_mice_category_kable <- kable(Pass_mice_category, format = "markdown")
passed_mice_kable <- kable(passed_mice, format = "markdown")
not_passed_mice_kable <- kable(not_passed_mice, format = "markdown")
save(Pass_mice_category_kable, file="Passing_mice_category.txt", ascii=TRUE)
save(passed_mice_kable, file="Passing_mice.txt", ascii=TRUE)
save(not_passed_mice_kable, file="Non_Passing_mice.txt", ascii=TRUE)
save(Pass_mice_category_kable, file="Passing_mice_category.txt", ascii=FALSE)
save(passed_mice_kable, file="Passing_mice.txt", ascii=FALSE)
save(not_passed_mice_kable, file="Non_Passing_mice.txt", ascii=FALSE)
save(Pass_mice_category_kable, file="Passing_mice_category.md", ascii=FALSE)
save(passed_mice_kable, file="Passing_mice.md", ascii=FALSE)
save(not_passed_mice_kable, file="Non_Passing_mice.md", ascii=FALSE)
save(Pass_mice_category_kable, file="Passing_mice_category.md", ascii=TRUE)
save(passed_mice_kable, file="Passing_mice.md", ascii=TRUE)
save(not_passed_mice_kable, file="Non_Passing_mice.md", ascii=TRUE)
pandoc('passed_mice_kable.md', format='markdown_github')
#Quality / number of passing mice
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
load(file="MLH1_data_setup.RData")
##FIX ORDER HERE
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
library(dplyr)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
ggplot(MLH1_by_F_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain) ) )
ggplot(MLH1_by_M_strain, aes(x = mouse, y = nMLH1.foci)) + geom_boxplot(data = MLH1_by_F_strain, aes(fill = factor(strain) ) )
unlink('README3_cache', recursive = TRUE)
install.packages("kableExtra")
# For dev version
# install.packages("devtools")
devtools::install_github("haozhu233/kableExtra")
install.packages("kableExtra")
# For dev version
# install.packages("devtools")
devtools::install_github("haozhu233/kableExtra")
install.packages("kableExtra")
# For dev version
# install.packages("devtools")
#devtools::install_github("haozhu233/kableExtra")
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
kable(dt)
kable(dt) %>%
kable_styling()
#install.packages("kableExtra")
# For dev version
# install.packages("devtools")
#devtools::install_github("haozhu233/kableExtra")
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
kable(dt)
kable(head(MLH1_data) )
##FIX ORDER HERE
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
library(dplyr)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
#save a figure of boxplots for each mouse
ggplot(MLH1_data, aes(x = mouse, y = nMLH1.foci)) +
geom_boxplot(data = MLH1_data, aes(fill = factor(strain), color = factor(sex) ) )
#Quality / number of passing mice
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
#q_cutoff_table
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
#make a table of the number of mice passed for each category.
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
not_passed_mice <- data.frame(not_passed_mice)
colnames(not_passed_mice) <- c("mouse")
#Quality / number of passing mice
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
#q_cutoff_table
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
#make a table of the number of mice passed for each category.
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
not_passed_mice <- data.frame(not_passed_mice)
colnames(not_passed_mice) <- c("mouse")
kable(passed_mice)
not_passed_mice
Pass_mice_category
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
#Quality / number of passing mice
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
#q_cutoff_table
passed_mice <- as.data.frame(q_cutoff_table[q_cutoff_table$q_l3 >= 15,]$mouse,
col.names= "mouse")
colnames(passed_mice) <- c("mouse")
passed_mice$strain <- ifelse(grepl("WSB", passed_mice$mouse), "WSB",
ifelse(grepl("G", passed_mice$mouse), "G",
ifelse(grepl("CAST", passed_mice$mouse), "CAST",
ifelse(grepl("MSM", passed_mice$mouse), "MSM",
ifelse(grepl("LEW", passed_mice$mouse), "LEWES",
ifelse(grepl("LEWES", passed_mice$mouse), "LEWES",
ifelse(grepl("PWD", passed_mice$mouse), "PWD", "other")))))))
passed_mice$sex <- ifelse(grepl("_f", passed_mice$mouse), "female",
ifelse(grepl("_m", passed_mice$mouse), "male", "other"))
#make a table of the number of mice passed for each category.
Pass_mice_category <- ddply(passed_mice, .(strain, sex), summarise,
"Passing Mice" =  length(mouse)
)
not_passed_mice <- setdiff(q_cutoff_table$mouse, passed_mice$mouse)
not_passed_mice <- data.frame(not_passed_mice)
colnames(not_passed_mice) <- c("mouse")
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
library(dplyr)
dt <- mtcars[1:5, 1:6]
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
##FIX ORDER HERE
MLH1_data$strain<- factor(MLH1_data$strain,levels =c("G", "LEWES",
"WSB", "PWD","MSM","CAST"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
library(dplyr)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(file.name = factor(file.name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
library(dplyr)
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
conflicts()
