pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
knitr::include_graphics("src/figs/stranMap.png")
knitr::include_graphics("src/figs/strainMap.png")
knitr::include_graphics("src/figs/strainMap.png")
knitr::include_graphics("src/figs/PnD_example.png")
knitr::include_graphics("src/figs/PnD_example.png")
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="C:/Users/alpeterson7/Documents/MLH1repo/PnD_environment.RData")#or current dir
#put figure in this or remake figure?
#put the measures
#grid.arrange(juju, mumu, ncol = 2, main = "Main title")
par(2,1)
juju
mumu
#setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="C:/Users/alpeterson7/Documents/MLH1repo/PnD_environment.RData")#or current dir
#put figure in this or remake figure?
#put the measures
#grid.arrange(juju, mumu, ncol = 2, main = "Main title")
juju
mumu
p1 <- file.path(FIGDIR, 'src/figs/PnD_example.png')
FIGDIR = "src/figs/"
FIGDIR = "src/figs/"
p1 <- file.path(FIGDIR, 'PnD_example.png')
p2 <- file.path(FIGDIR, 'PnD_example.png')
knitr::include_graphics(c(p1,p2))
#cowplot::plot_grid(p1, p2, labels = "AUTO", ncol = 1, align = 'v')
library(nlme)
setwd("C:/Users/alpeterson7/Documents/MatLabChrmMeasures")
load(file="BivData.Rdata")
table(BivData$category)
n <- table(BivData$category)
kaba_taba <- kable(n)
library(kable)
library(knitr)
kaba_taba <- kable(n)
str(n)
n <- as.dataframe(table(BivData$category))
n <- as.data.frame(table(BivData$category))
kaba_taba <- kable(n)
kaba_taba
write(kaba_taba, file = "data",
ncolumns = if(is.character(x)) 1 else 5,
append = FALSE, sep = " ")
write.table(kaba_taba, "results/SummaryTable.txt", sep="\t")
kaba_taba <- kable(n, format = "markdown")
kaba_taba
write.table(kaba_taba, "results/SummaryTable.txt", sep="\t")
table(BivData$category, BivData$fileName)
table(BivData$category, unique(BivData$fileName))
table(BivData$category, BivData$strain)
data_table <- ddply(BivData, .(category), summarise,
total_chrms =  length(fileName),
nMice = length(unique(mouse)),
ncells = length(unique(fileName))
#
)
library(plyr)
data_table <- ddply(BivData, .(category), summarise,
total_chrms =  length(fileName),
nMice = length(unique(mouse)),
ncells = length(unique(fileName))
#
)
data_table
tabo <- kable(data_table, format = "markdown")
tabo
tabo <- kable(data_table)
table()
tabo
rawdata_table <- ddply(rawBivData, .(category), summarise,
nMice = length(unique(mouse)),
ncells = length(unique(fileName)),
total_chrms =  length(fileName)
)
rawdata_table
kk<- cbind(tabo, rawdata_table$total_chrms)
tabo
kk<- cbind(data_table, rawdata_table$total_chrms)
kk
names(kk)
colnames(kk)
colnames(kk) <- c("category", "total_chrms", "nMice","ncells", "rawdata_table$total_chrms")
colnames(kk) <- c("category", "total_chrms", "nMice","ncells", "total chrms")
kk
data_table <- ddply(BivData, .(category), summarise,
nMice = length(unique(mouse)),
ncells = length(unique(fileName)),
total_chrms =  length(fileName)
)
data_table
kk<- cbind(data_table, rawdata_table$total_chrms)
kk
colnames(kk) <- c("category",  "nMice","ncells","cleaned chrms", "total chrms")
kkk
kk
unique(BivData$mouse)
View(BivData)
View(BivData)
table(BivData$category)
library(knitr)
library(plyr)
setwd("C:/Users/alpeterson7/Documents/MatLabChrmMeasures")
load(file="BivData.Rdata")
setwd("C:/Users/alpeterson7/Documents/MatLabChrmMeasures/data/")
load(file="BivData.Rdata")
load(file="MLH1_data_setup.RData")
View(MLH1_data)
table(MLH1_data$category)
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
View(MLH1_data)
View(MLH1_data)
library(plyr)
library(dplyr)
library(raster)#for cV
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
MLH1_data = read.csv("data/AnonData.csv", header=TRUE )
original_DF = MLH1_data
original_length <- length(MLH1_data$Original.Name)
MLH1_data$Original.Name <- as.character(MLH1_data$Original.Name)
MLH1_data$n <- as.character(MLH1_data$n)
MLH1_data$nMLH1.foci<- as.character(MLH1_data$nMLH1.foci)
MLH1_data$quality<- as.character(MLH1_data$quality)
MLH1_data$n <- as.numeric(MLH1_data$n)
MLH1_data$nMLH1.foci<- as.numeric(MLH1_data$nMLH1.foci)
MLH1_data$quality<- as.numeric(MLH1_data$quality)
missing_data_DF <- MLH1_data[(MLH1_data$nMLH1.foci == "" | MLH1_data$quality == ""),]
MLH1_data <- MLH1_data[ !grepl("X", MLH1_data$X) , ]
MLH1_data <- MLH1_data[!(is.na(MLH1_data$nMLH1.foci) | MLH1_data$nMLH1.foci==""), ]
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci != "X",]
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci != "x",]
source("src/Func_addCategory.R")
MLH1_data <- add_category(MLH1_data)
source("src/Func_addStrain.R")
MLH1_data <- add_strain(MLH1_data)
source("src/Func_addSex.R")
MLH1_data <- add_sex(MLH1_data)
MLH1_data$adj_nMLH1.foci <- ifelse(MLH1_data$sex=="male", MLH1_data$nMLH1.foci+1, MLH1_data$nMLH1.foci)
MLH1_data$adj_nMLH1.foci <- as.numeric(MLH1_data$adj_nMLH1.foci)
source("src/Func_addMouse.R")
MLH1_data <- add_mouse(MLH1_data)
source("src/Func_addSubsp.R")
MLH1_data <- add_subsp(MLH1_data)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name))
MLH1_data <- MLH1_data[ !grepl("12sep16_MSM_f3", MLH1_data$mouse) , ]
MLH1_data <- MLH1_data[ !grepl("12sep16_MSM_f1", MLH1_data$mouse) , ]
AP_mouse_table <- ddply(MLH1_data, c("mouse"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(adj_nMLH1.foci),
mean_co = as.numeric(format(round(  mean(adj_nMLH1.foci), 3 ), nsmall=3) ),
cV = cv(adj_nMLH1.foci),
var = format(round(   var(adj_nMLH1.foci),3), nsmall=3),
sd   = round(sd(adj_nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3)
)
AP_mouse_table$subsp <-  ifelse(grepl("_WSB_", AP_mouse_table$mouse), "Dom",
ifelse(grepl("_G_", AP_mouse_table$mouse), "Dom",
ifelse(grepl("_LEW", AP_mouse_table$mouse), "Dom",
ifelse(grepl("PWD", AP_mouse_table$mouse), "Musc",
ifelse(grepl("MSM", AP_mouse_table$mouse), "Musc",
ifelse(grepl("KAZ", AP_mouse_table$mouse), "Musc",
ifelse(grepl("CAST", AP_mouse_table$mouse), "Cast",
ifelse(grepl("HMI", AP_mouse_table$mouse), "Cast",
ifelse(grepl("SPI", AP_mouse_table$mouse), "outgroup",
ifelse(grepl("CAROLI", AP_mouse_table$mouse), "outgroup",
ifelse(grepl("SPRET", AP_mouse_table$mouse), "outgroup",
"other")))))))))))
AP_mouse_table$strain <-  ifelse(grepl("_WSB_", AP_mouse_table$mouse), "WSB",
ifelse(grepl("_G_", AP_mouse_table$mouse), "G",
ifelse(grepl("_LEW", AP_mouse_table$mouse), "LEW",
ifelse(grepl("PWD", AP_mouse_table$mouse), "PWD",
ifelse(grepl("MSM", AP_mouse_table$mouse), "MSM",
ifelse(grepl("KAZ", AP_mouse_table$mouse), "KAZ",
ifelse(grepl("CAST", AP_mouse_table$mouse), "CAST",
ifelse(grepl("HMI", AP_mouse_table$mouse), "HMI",
ifelse(grepl("SPI", AP_mouse_table$mouse), "SPIC",
ifelse(grepl("CAROLI", AP_mouse_table$mouse), "CAROLI",
ifelse(grepl("SPRET", AP_mouse_table$mouse), "SPRET",
"other")))))))))))
AP_mouse_table$sex <-  ifelse(grepl("_f", AP_mouse_table$mouse), "female",
ifelse(grepl("_m", AP_mouse_table$mouse), "male",
"other"))
AP_mouse_table$sex <- as.factor(AP_mouse_table$sex)
AP_mouse_table$strain <- as.factor(AP_mouse_table$strain)
AP_mouse_table$subsp <-  as.factor(AP_mouse_table$subsp)
fullBD_MLH1_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/BD_MLH1data/BD_RecombinationPhenotypes_input.csv")
BDMLH1_data <- subset(fullBD_MLH1_data, (Cross %in%  c("PANCEVO","RAT","CIM", "PWDFemale", "PWD","Peromyscus",
"CZECHI","PERA", "CAROLI", "CAST", "Microtus", "WSB") ))
rm(fullBD_MLH1_data)
print(c("initial data set of ", original_length, " cells, was slimed down to ",
length(MLH1_data$Original.Name)) )
print(c("The mean MLH1 foci number is  ", mean(MLH1_data$nMLH1.foci, na.rm =TRUE),
"the distribution of quality scores is ", table(MLH1_data$quality)  ) )
save.image("MLH1_data_setup.RData")
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
library(knitr)
#
library(knitr)
library(ggplot2)
#library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
#setwd("C:/Users/April/Desktop/MLH1repo")
load(file="MLH1_data_setup.RData")
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, category, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
#use the above line for when order is out of wak
#count the non-quality measures,  #remove non qualit
#length(MLH1_data[ !(is.na(MLH1_data$quality) | MLH1_data$quality==""), ] )  #15 rows with out quality scores, remove.
#MLH1_data <- MLH1_data[ !(is.na(MLH1_data$quality) | MLH1_data$quality==""), ]
#MLH1_by_F_strain <- MLH1_data[MLH1_data$sex == "female", ]
#MLH1_by_M_strain <- MLH1_data[MLH1_data$sex == "male", ]
#this table is saved in the .RData file
#use kable to make tables. warning this might not work for github Rmd.
n <- kable(AP_mouse_table)
n
#the below ordering works!! keep it
MLH1_data$strain<- factor(MLH1_data$strain, levels =c("G", "LEWES",
"WSB", "PWD","MSM","KAZ","CAST","HMI","SPRET","SPIC", "other"), order=T )
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
#reduncant
#MLH1_data <- MLH1_data %>%
# arrange(strain, sex, mouse) %>%
#  mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
#MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci, fill= strain ))+geom_boxplot()+ ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00","red", "yellowgreen", "green","purple","grey1", "grey" ))
ff <- ff   + facet_wrap(~ sex, scales="free")
#boxplots by strain
ss <- ggplot(MLH1_data, aes(x = as.factor(strain), y = adj_nMLH1.foci, fill= strain )) + geom_boxplot()  + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00","red", "yellowgreen", "green", "purple","grey1","grey" ))
ss <- ss   + facet_wrap(~ sex, scales="free")
ff
ss
#consider making distribution with quality considered...
histM <- ggplot(MLH1_data,(aes(adj_nMLH1.foci))) + xlim(c(16, 38))
histM <- histM + geom_histogram(stat = "bin", binwidth = 1)
histM <- histM + facet_wrap(~ category)
histM
q_cutoff_table <- ddply(MLH1_data, .(mouse), summarise,
total =  length(adj_nMLH1.foci),
q5 = sum(as.numeric(quality) >= 4, na.rm = TRUE ),
above5 = sum(as.numeric(quality) <= 4, na.rm = TRUE )
# q_l3 = sum(as.numeric(as.numeric(quality)) <= 4, na.rm = TRUE )
)
#q_cutoff_table
passed_mice <- as.vector(q_cutoff_table[q_cutoff_table$above5 > 15,]$mouse)
not_passed <- as.vector(unique(MLH1_data[!(unique(MLH1_data$mouse) %in% passed_mice),]$mouse) )
#mnake dataframe with just passing mice -- so that it can be ploted
passed_mice_df <- MLH1_data[ (as.numeric(MLH1_data$quality) < 5), ]
high_qual_boxplot
highest_qual_df <-  subset(MLH1_data, as.numeric(MLH1_data$quality) <= 2 )
qq <- ggplot(highest_qual_df, aes(x = mouse, y = adj_nMLH1.foci)) + geom_boxplot(data = highest_qual_df, aes(fill = factor(strain) ) ) +  ggtitle("Cells with quality scores of 2 or 1") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "red","yellowgreen", "green","purple", "black", "grey" ))
high_qual_boxplot <- qq + facet_wrap(~ sex, scales="free") #this is breaking the kniting...
high_qual_boxplot
#make lattice / plots seperated by strain and sex
#facet
#quality scores are now 1:7?
qual_means <- MLH1_data %>%
group_by(category, quality) %>%
summarise(
adj_nMLH1.foci = mean(adj_nMLH1.foci)
)
p <- ggplot(MLH1_data,(aes(adj_nMLH1.foci,quality)))
p <- p + geom_point(stat = "identity")
p <- p  + geom_point(data = qual_means, colour="red")
p <- p + facet_wrap(~ category)
p
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16,19, 21) ]
#7: PERC male,   12: #KAZ female! 14:CAST female 16:HMI female,19:SPIC male, 21:SPIC male
#df list, is a list of df's which were split() from BIG df by category
df_list
o=0
i=0
#make a new empty df. create a ddply thing with mean calculations (this is like a list for matching up later)
for(i in 1:(length(df_list))){
# only include data with quality values, then create a ddply for specific sub-df that calqs mean by each mouse
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# this loop is going though each row of dataframes within the df.list and assining the mouse mean
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
head(df_list[1])
head(df_list[[1]])
name(df_list[1])
names(df_list[1])
names(df_list[2])
names(df_list[3])
names(df_list[13])
names(df_list[12])
df_list <- split(MLH1_data, (MLH1_data$category))
names(df_list)
names(df_list[10])
names(df_list[21])
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,15) ]
#7: PERC male,   12: #KAZ female! 14:CAST female 15:HMI female,19:SPIC male, 21:SPIC male
#df list, is a list of df's which were split() from BIG df by category
df_list
o=0
i=0
#make a new empty df. create a ddply thing with mean calculations (this is like a list for matching up later)
for(i in 1:(length(df_list))){
# only include data with quality values, then create a ddply for specific sub-df that calqs mean by each mouse
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# this loop is going though each row of dataframes within the df.list and assining the mouse mean
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
names(df_list)
df_list <- split(MLH1_data, (MLH1_data$category))
names(df_list)
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12,14,16) ]
#7: PERC male, 12: KAZ female! (14:CAST female, fake data) 16:HMI female
#df list, is a list of df's which were split() from BIG df by category
df_list
o=0
i=0
#make a new empty df. create a ddply thing with mean calculations (this is like a list for matching up later)
for(i in 1:(length(df_list))){
# only include data with quality values, then create a ddply for specific sub-df that calqs mean by each mouse
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# this loop is going though each row of dataframes within the df.list and assining the mouse mean
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
df_list <- split(MLH1_data, (MLH1_data$category))
names(df_list)
names(df_list[21])
names(df_list[22])
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12,14,16,22) ]
#7: PERC male, 12: KAZ female! (14:CAST female, fake data) 16:HMI female
#df list, is a list of df's which were split() from BIG df by category
df_list
o=0
i=0
#make a new empty df. create a ddply thing with mean calculations (this is like a list for matching up later)
for(i in 1:(length(df_list))){
# only include data with quality values, then create a ddply for specific sub-df that calqs mean by each mouse
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# this loop is going though each row of dataframes within the df.list and assining the mouse mean
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
