mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = IFD)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm
p2
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
IFD_bxplt <- boxplot( x=(IFD_nMLH1$ANIMAL_ID), y = IFD_nMLH1$IFD, main= "IFD distributions")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
P0_IFD_bxplt <- F0_IFD_bxplt + facet_wrap(~ Cross.x, scales="free")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
#IFD_nMLH1$unique_biv_name <- do.call(paste, #c(IFD_nMLH1[c("file_name","ANIMAL_ID", "Slide_ID", "CellNumber", #"Biv.ID")], sep = "_"))
#TODO rank the ranges or min
#1) create a unique id for each row
#2) make the ranked categories
#make F2 mouse data table (with min and max)
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table <- F2_table[order(F2_table$range),]
order.range <- order(F2_table$range)
F2_table<- F2_table[order.range, ]
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("plot of range") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) +ggtitle("Minimum values") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
mm
#remove bottome axis label
#I wish I could rank the min, and the variance to better display the ranges
vv <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, var), y = mean)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("F2 variation in IFD ranges") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
vv
BDmouseBivClass_proportions
BDmouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = length(nMLH1_foci),
biv0CO =  mean( (as.numeric(nChrWithoutXO) ) ) / nCells,
biv1CO =  mean( (as.numeric(nChrWith1XO) ) ) / nCells ,
biv2CO =  mean( (as.numeric(nChrWith2XO) ) ) / nCells ,
biv3CO =  mean( (as.numeric(nChrWith3.XO) ) )/ nCells
)
BDmouseBivClass_proportions
P0 <- IFD_nMLH1[(IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table
F2
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
View(F2)
F2_table <- ddply(F2, .(Animal.ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/ALP_MouseMetadata2.csv")
ply_set <- meta_data[5:9,]
View(meta_data)
mat_dob <- as.Date(meta_data$maternal.age..DOB.[4], format= '%m/%d/%Y')
mat_dob
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$diffy_weeks[t] <- vv
meta_data$diffy_hours[t] <- hh
meta_data$calq_age[t] <- fomt_euth
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(mat_dob,  as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )
meta_data$mat_age <- gg
}
meta_data <- meta_data[3:16,]
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$diffy_weeks[t] <- vv
meta_data$diffy_hours[t] <- hh
meta_data$calq_age[t] <- fomt_euth
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(mat_dob,  as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )
meta_data$mat_age <- gg
}
meta_data$mouse <- as.character(meta_data$mouse)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$diffy_weeks[t] <- vv
meta_data$diffy_hours[t] <- hh
meta_data$calq_age[t] <- fomt_euth
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(mat_dob,  as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )
meta_data$mat_age <- gg
}
View(meta_data)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$diffy_weeks[t] <- vv
meta_data$diffy_hours[t] <- hh
meta_data$calq_age[t] <- fomt_euth
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(mat_dob,  as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )
meta_data$mat_age[t] <- gg
}
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$diffy_weeks[t] <- vv
meta_data$diffy_hours[t] <- hh
meta_data$calq_age[t] <- fomt_euth
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(as.Date(meta_data$DOB[t], '%m/%d/%Y'),mat_dob), units="weeks" )
meta_data$mat_age[t] <- gg
}
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/ALP_MouseMetadata2.csv")
meta_data$mouse <- as.character(meta_data$mouse)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$age_weeks[t] <- vv
meta_data$age_hours[t] <- hh
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(as.Date(meta_data$DOB[t], '%m/%d/%Y'),mat_dob), units="weeks" )
meta_data$mat_age_wk[t] <- gg
}
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/ALP_MouseMetadata2.csv")
meta_data$mouse <- as.character(meta_data$mouse)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$age_weeks[t] <- vv
meta_data$age_hours[t] <- hh
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(as.Date(meta_data$DOB[t], '%m/%d/%Y'),mat_dob), units="weeks" )
meta_data$mat_age_wk[t] <- gg
}
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/ALP_MouseMetadata.csv")
meta_data$mouse <- as.character(meta_data$mouse)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$age_weeks[t] <- vv
meta_data$age_hours[t] <- hh
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(as.Date(meta_data$DOB[t], '%m/%d/%Y'),mat_dob), units="weeks" )
meta_data$mat_age_wk[t] <- gg
}
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/mouseDOBs.csv")
meta_data$mouse <- as.character(meta_data$mouse)
View(meta_data)
meta_data = read.csv("C:/Users/alpeterson7/Documents/MLH1data/data/mouseDOBs.csv")
meta_data$mouse <- as.character(meta_data$mouse)
for( t in 1:length(meta_data$mouse)){
euth_date = strsplit(meta_data$mouse[t], split="_")[[1]][1]
meta_data$raw_euth_date[t] <- strsplit(meta_data$mouse[t], split="_")[[1]][1]
fomt_euth <- as.Date(strsplit(meta_data$mouse[t], split="_")[[1]][1], format= '%d%b%y')
fomt_euth_nrm <- as.Date(fomt_euth, "%Y-%m-%d")
vv <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="weeks" )#whoo, this works
hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
meta_data$age_weeks[t] <- vv
meta_data$age_hours[t] <- hh
#mat age, DOB -Mat_dob
mat_dob <- as.Date(meta_data$maternal.age..DOB.[t], format= '%m/%d/%Y')
#  hh <- as.numeric(difftime(fomt_euth, as.Date(meta_data$DOB[t], '%m/%d/%Y')), units="hours" )
gg <- as.numeric(difftime(as.Date(meta_data$DOB[t], '%m/%d/%Y'),mat_dob), units="weeks" )
meta_data$mat_age_wk[t] <- gg
}
View(meta_data)
load("MLH1_data_setup.RData")
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
load("MLH1_data_setup.RData")
mergedDF = merge(MLH1_data, meta_data, by.x = "mouse")
mergedDF = merge(MLH1_data, meta_data, by = "mouse")
View(mergedDF)
dissected_mice <- unique(meta_data$mouse)
imaged_mice <- unique(MLH1_data$mouse)
overlapping_mice <- imaged_mice/dissected_mice
overlapping_mice <- length(imaged_mice)/length(dissected_mice)
overlapping_mice
plot(mergedDF$adj_nMLH1.foci, mergedDF$age_weeks)
length(isna(mergedDF$DOB) )
length(is.na(mergedDF$DOB) )
n <- unique(mergedDF[(is.na(mergedDF$DOB) ),]$mouse)
n
n <- unique(mergedDF[(mergedDF$DOB == '') ),]$mouse)
n <- unique(mergedDF[(mergedDF$DOB == '' ),]$mouse)
n
n <- unique(mergedDF[(mergedDF$DOB == NA ),]$mouse)
n <- unique(mergedDF[(mergedDF$DOB == '' ),]$mouse)
m <- unique(mergedDF[(mergedDF$DOB == NA ),]$mouse)
n
m
dfn <- mergedDF[(mergedDF$DOB == '' ),]
dfm <- mergedDF[(mergedDF$DOB == NA), ]
unique(dfn$mouse)
unique((dfm$mouse))
F_merged_DF <- mergedDF[mergedDF$sex == "female",]
M_merged_DF <- mergedDF[mergedDF$sex == "male", ]
View(M_merged_DF)
View(F_merged_DF)
unique(mergedDF$Batch)
b1df <- MLH1_data[MLH1_data$Batch == "Batch1",]
unique(b1df$mouse)
head(b1df$mouse)
View(MLH1_data)
unique(MLH1_data$Batch)
MLH1_data = read.csv("data/AnonData.csv", header=TRUE)
unique(MLH1_data$Batch)
big_data = read.csv("data/bigdata.csv", header=TRUE)
unique(big_data$Batch)
big_data = read.csv("data/bigdata.csv", header=TRUE)
unique(big_data$Batch)
MLH1_data = read.csv("data/AnonData.csv", header=TRUE)
original_length = length(MLH1_data$Original.Name)
MLH1_data <- MLH1_data[MLH1_data$X != "X",]
MLH1_data <- MLH1_data[MLH1_data$X != "X",]
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
load("MLH1_data_setup.RData")
View(MLH1_data)
unique(MLH1_data$mouse)
unique(MLH1_data$Batch)
batch0 = read.csv("data/batch0_data.csv", header=TRUE)
batch1 = read.csv("data/anon_batch1_m.csv", header=TRUE)
batch2= read.csv("data/batch2_female_data.csv", header=TRUE)
batch3 = read.csv("data/anon_batch3_m.csv", header=TRUE)
batch4 = read.csv("data/anon_batch4_f.csv", header=TRUE)
batch6 = read.csv("data/anon_batch6_m.csv", header=TRUE)
840+128+225+176+196+245
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
load("MLH1_data_setup.RData")
View(change)
load(file="MLH1_data_setup.RData")
View(MLH1_data)
table(MLH1_data$strain)
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
MLH1_data <- MLH1_data %>%
arrange(strain, sex, mouse) %>%
mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
View(MLH1_data)
#order the data frame
MLH1_data <- with(MLH1_data, MLH1_data[order(sex, strain),])
#set the order of another column, based on another variable (so that when)
#MLH1_data <- MLH1_data %>%
#  arrange(strain, sex, mouse) %>%
#  mutate(Original.Name = factor(Original.Name)) #another category that you want the order to match
# sort your dataframe, by the focal categories
MLH1_data$mouse <- factor(MLH1_data$mouse, levels=unique(MLH1_data$mouse))
#Add fake CAST female data
last_row <-data.frame(Original.Name=c("12dec18_20dec20_CAST_f1_sp1_12_1_rev.tif", "12dec18_20dec20_CAST_f1_sp1_12_2_rev.tif"), Random.Name = c("1234567.tif","123456789.tif"), quality=c(1,1),nMLH1.foci =c(25,22), XY.paired =c("no","no"), REDO.crop =c("no","no"),n =c(20,20), achiasmate=c(0,0),asynased=c(0,0),notes=c("",""),category = c("CAST female","CAST female"), strain= c("CAST","CAST"), sex=c("female","female"),adj_nMLH1.foci=c(25,22),mouse=c("20dec20_CAST_f1","20dec20_CAST_f1") )
MLH1_data <- rbind(MLH1_data, last_row)
colnames(MLH1_data)
last_row <-data.frame(Batch = c("100", "100"), X= c("",""), Original.Name=c("12dec18_20dec20_CAST_f1_sp1_12_1_rev.tif", "12dec18_20dec20_CAST_f1_sp1_12_2_rev.tif"), Random.Name = c("1234567.tif","123456789.tif"), quality=c(1,1),nMLH1.foci =c(25,22), XY.paired =c("no","no"), REDO.crop =c("no","no"),n =c(20,20), achiasmate=c(0,0),asynased=c(0,0),notes=c("",""),category = c("CAST female","CAST female"), strain= c("CAST","CAST"), sex=c("female","female"),adj_nMLH1.foci=c(25,22),mouse=c("20dec20_CAST_f1","20dec20_CAST_f1") )
MLH1_data <- rbind(MLH1_data, last_row)
ff <- ggplot(MLH1_data, aes(x = as.factor(mouse), y = adj_nMLH1.foci)) + geom_boxplot(data = MLH1_data, aes(fill = factor(strain) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen", "black", "grey"))
#TODO, add a line for mouse and strain
#this creates a slot for CAST female, but no data
#each of the indiviual dataframes can be acessed with df_list$ ---- category
# for each sub-data frame, make mouse specific table,
#
#add mouse mean to the df
df_list <- split(MLH1_data, as.factor(MLH1_data$category))
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
#TODO, add a line for mouse and strain
#this creates a slot for CAST female, but no data
#each of the indiviual dataframes can be acessed with df_list$ ---- category
# for each sub-data frame, make mouse specific table,
#
#add mouse mean to the df
df_list <- split(MLH1_data, as.factor(MLH1_data$category))
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
#geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj,function(x) plot(x,main="some plot")))
}
df_list
levels(MLH1_data$strain)
str(MLH1_data$strain)
View(AP_strain_table)
AP_strain_table <- ddply(MLH1_data, c("strain", "sex"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(nMLH1.foci),
mean_co = format(round(  mean(nMLH1.foci), 3 ), nsmall=3),
var = format(round(   var(nMLH1.foci),3), nsmall=3),
sd   = round(sd(nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3)
)
View(AP_strain_table)
str(MLH1_data)
another <- MLH1_data[MLH1_data$nMLH1.foci = "X",]
another <- MLH1_data[MLH1_data$nMLH1.foci += "X",]
another <- MLH1_data[MLH1_data$nMLH1.foci == "X",]
View(MLH1_data)
another <- MLH1_data[MLH1_data$nMLH1.foci <= 10,]
View(another)
table(another)
table(another$nMLH1.foci)
table(another$Batch)
oneother <- MLH1_data[MLH1_data$nMLH1.foci <= 15,]
table(another$nMLH1.foci)
table(onenother$nMLH1.foci)
table(oneother$nMLH1.foci)
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci >=15,]
AP_strain_table <- ddply(MLH1_data, c("strain", "sex"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(nMLH1.foci),
mean_co = format(round(  mean(nMLH1.foci), 3 ), nsmall=3),
var = format(round(   var(nMLH1.foci),3), nsmall=3),
sd   = round(sd(nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3)
)#currently these are too low
AP_strain_tabl
AP_strain_table
View(MLH1_data)
AP_strain_table <- ddply(MLH1_data, c("strain", "sex"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(nMLH1.foci),
mmean_co =  mean(nMLH1.foci),
mean_co = format(round(  mean(nMLH1.foci), 3 ), nsmall=3),
var = format(round(   var(nMLH1.foci),3), nsmall=3),
sd   = round(sd(nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3)
)#currently these are too low
AP_strain_table
MLH1_data <- MLH1_data[MLH1_data$X != "x",]
bat2 <- MLH1_data[MLH1_data$Batch != "Batch2",]
mean(bat$nMLH1.foci)
mean(bat2$nMLH1.foci)
setwd("C:/Users/alpeterson7/Documents/MLH1repo/")
MLH1_data = read.csv("data/AnonData.csv", header=TRUE)
MLH1_data = read.csv("data/AnonData.csv", header=TRUE)
bat2 <- MLH1_data[MLH1_data$Batch != "Batch2",]
bat2 <- MLH1_data[MLH1_data$Batch == "Batch2",]
bat2 <- bat2[bat2$X != "X",]
mean(bat2$nMLH1.foci)
mean(as.numeric(bat2$nMLH1.foci))
length(as.numeric(bat2$nMLH1.foci) )
hist(bat2$nMLH1.foci)
hist(as.numeric(bat2$nMLH1.foci))
str(bat2)
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci != "",]
bat2 <- MLH1_data[MLH1_data$Batch == "Batch2",]
mean(bat2$nMLH1.foci)
mean(as.numeric(bat2$nMLH1.foci))
bat2 <- bat2[bat2$X != "X",]
mean(as.numeric(bat2$nMLH1.foci))
levels(bat2$nMLH1.foci)
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci != "X",]
bat2 <- MLH1_data[MLH1_data$Batch == "Batch2",]
levels(bat2$nMLH1.foci)
MLH1_data <- MLH1_data[MLH1_data$nMLH1.foci != "x",]
bat2 <- MLH1_data[MLH1_data$Batch == "Batch2",]
bat2 <- bat2[bat2$X != "X",]
levels(bat2$nMLH1.foci)
mean(as.numeric(bat2$nMLH1.foci))
bat2$nMLH1.foci <- as.numeric(bat2$nMLH1.foci)
mean(as.numeric(bat2$nMLH1.foci))
mean(bat2$nMLH1.foci)
min(nMLH1.foci)
min(bat2$nMLH1.foci)
max(bat2$nMLH1.foci)
bat2$Original.Name
bat2$Original.Name[1]
bat2$Original.Name[1,]
bat2[1,]
bat2[2,]
bat2[3,]
bat2[4,]
