rr
rr
F2_table
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -range), y = range)) +
geom_bar(stat = "identity")
p2
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -range), y = range)) +
geom_linerange(aes(ymin = min, ymax =max))
p2
p2
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = IFD)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max))
mm
mm
p2
rr <- ggplot(F2_table, aes(ANIMAL_ID, mean)) + geom_linerange(aes(ymin = min, ymax =max))
rr
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
IFD_bxplt <- boxplot( x=(IFD_nMLH1$ANIMAL_ID), y = IFD_nMLH1$IFD, main= "IFD distributions")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
P0_IFD_bxplt <- F0_IFD_bxplt + facet_wrap(~ Cross.x, scales="free")
P0 <- IFD_nMLH1[( IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
P0_IFD_bxplt <- ggplot(P0, aes(x = as.factor(ANIMAL_ID), y = IFD)) + geom_boxplot(data = P0, aes(fill = factor(Cross.x) ) ) + ggtitle("Boxplots of MLH1 distributions by mouse") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + scale_fill_manual(values=c("#56B4E9", "cadetblue", "lightblue",  "coral1", "#E69F00", "yellowgreen"))
#IFD_nMLH1$unique_biv_name <- do.call(paste, #c(IFD_nMLH1[c("file_name","ANIMAL_ID", "Slide_ID", "CellNumber", #"Biv.ID")], sep = "_"))
#TODO rank the ranges or min
#1) create a unique id for each row
#2) make the ranked categories
#make F2 mouse data table (with min and max)
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table <- F2_table[order(F2_table$range),]
order.range <- order(F2_table$range)
F2_table<- F2_table[order.range, ]
p2 <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, range), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("plot of range") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p2
mm <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, -min), y = range)) +  geom_linerange(aes(ymin = min, ymax =max)) +ggtitle("Minimum values") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
mm
#remove bottome axis label
#I wish I could rank the min, and the variance to better display the ranges
vv <- ggplot(F2_table, aes(x = reorder(ANIMAL_ID, var), y = mean)) +  geom_linerange(aes(ymin = min, ymax =max)) + ggtitle("F2 variation in IFD ranges") + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
vv
BDmouseBivClass_proportions
BDmouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = length(nMLH1_foci),
biv0CO =  mean( (as.numeric(nChrWithoutXO) ) ) / nCells,
biv1CO =  mean( (as.numeric(nChrWith1XO) ) ) / nCells ,
biv2CO =  mean( (as.numeric(nChrWith2XO) ) ) / nCells ,
biv3CO =  mean( (as.numeric(nChrWith3.XO) ) )/ nCells
)
BDmouseBivClass_proportions
P0 <- IFD_nMLH1[(IFD_nMLH1$Cross.x == "CAST" | IFD_nMLH1$Cross.x == "PWD"), ]
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2_table
F2
F2_table <- ddply(F2, .(ANIMAL_ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
F2 <- IFD_nMLH1[IFD_nMLH1$Cross.x == "CxPF2", ]
View(F2)
F2_table <- ddply(F2, .(Animal.ID), summarise,
total_ifd =  length(IFD),
mean_IFD = mean(IFD),
min = min(IFD),
max = max(IFD),
range = max-min,
var= var(IFD)
)
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
table(MLH1_data$category)
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point( aes(colour = factor(Batch) ), stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
library(knitr)
library(ggplot2)
library(pwr)
library(plyr)
library(lattice)
library(dplyr)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point( aes(colour = factor(Batch) ), stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point( colour = factor(Batch), stat = "identity")+ geom_jitter()
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point( aes(colour = factor(Batch)), stat = "identity")
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity") +geom_jitter(aes(colour = factor(Batch))
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_point(stat = "identity") +geom_jitter(aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
#what is the purpose of this block
df_list <- split(MLH1_data, (MLH1_data$category))
#remove sections which are in category but have no data
df_list <- df_list[ -c(7, 12, 14,16, 18) ]
#7, PERC. 12 CASTF, 14 HMI f , 16 SPRET f. 18 other
df_list
o=0
i=0
for(i in 1:(length(df_list))){
# print(i)
df_list[[i]] <- df_list[[i]][!(is.na(df_list[[i]]$quality) | df_list[[i]]$quality==""), ]
sub_mouse_means <- ddply(df_list[[i]], .(mouse), summarise,
mouse_nMLH1 = mean(adj_nMLH1.foci)
)
# print(sub_mouse_means)
#below should work -- I think I need to go througheach row of the df_list[[i]]
for(o in 1:length(df_list[[i]]$Original.Name)){
df_list[[i]]$mouse_mean_MLH1[o] <- sub_mouse_means$mouse_nMLH1[ (df_list[[i]]$mouse[o] == sub_mouse_means$mouse) ]
}
}
#remove CAST, this column isn't added to MLH1 col, it's added to df_list
#The above adds a column of mouse specific averages to a giant list of dataframes. Each dataframe in the list is specific to a category.
#the next step is to make plots from this giant list of dataframes
# I can delete all of the code below that by hand makes
### not make a loop for ggplot... or giant ggplot base that uses latice smartly
# make new ggplots -- that are replaces
plot_list = list()
for (h in 1:length(df_list)) {
pf <- ggplot(df_list[[h]],(aes(y= adj_nMLH1.foci, x= quality)))
pf <- pf + geom_jitter(width = 0.25, aes(colour = factor(Batch)) )
pf <- pf + geom_hline(yintercept = c( mean(df_list[[h]]$adj_nMLH1.foci) ), color="black" )
pf <- pf + facet_wrap(~ mouse) + geom_hline(aes(yintercept = mouse_mean_MLH1), color="red")
plot_list[[h]] =   pf
}
#aes must be same length ---   #geom_point(stat = "identity") +
# the last one is correct....?
#so plot list is some wride dataframe, but indeces 1:12 in plot list are ggplots
geom_hline(aes(yintercept = med, group = gr), colour = 'red')
for (gg in 1:length(plot_list) ){
show(plot_list[gg])
#invisible(lapply(obj, function(x) plot(x,main="some plot")))
}
library(plyr)
library(dplyr)
library(ggplot2)
setwd("C:/Users/alpeterson7/Documents/MLH1repo")
load(file="MLH1_data_setup.RData")
Mouse_table
MLH1_data<- MLH1_data[!grepl("4apr15_WSB_f2", MLH1_data$mouse) , ] #1649
MLH1_data<- MLH1_data[!grepl("12sep16_MSM_f1", MLH1_data$mouse) , ]
MLH1_data<- MLH1_data[!grepl("4jan17_LEW_f1", MLH1_data$mouse) , ]#one duplicate image found
Mouse_table <- ddply(MLH1_data, c("strain", "sex", "mouse"), summarise,
Nmice = length(unique(mouse)),
Ncells  = length(adj_nMLH1.foci),
mean_co = as.numeric(format(round(  mean(adj_nMLH1.foci), 3 ), nsmall=3) ),
var = format(round(   var(adj_nMLH1.foci),3), nsmall=3),
sd   = round(sd(adj_nMLH1.foci), 3),
se   = round(sd / sqrt(Ncells), 3),
cV = round( (as.numeric(sd) / as.numeric(mean_co) ),3)
)
Mouse_table
source("src/Func_addSubsp.R")
Mouse_table <- add_subsp(Mouse_table)
Strain_table <- ddply(Mouse_table, c("strain", "sex"), summarise,
Nmice = length(unique(mouse)),
Ncells  = sum(Ncells),
strain.mean = format( round(  mean(mean_co), 3 ), nsmall=3),
strain.var = round( var(mean_co), 3),
strain.sd   = round( sd(mean_co), 3),
#decide if se denominator is n mice or ncells
strain.se1   = round( strain.sd / sqrt(Nmice), 3),
strain.se2   = round( strain.sd / sqrt(Ncells), 3),
cV = round( (as.numeric(strain.sd) / as.numeric(strain.mean) ),3)
)
Dom <- MLH1_data[( MLH1_data$strain == "WSB" | MLH1_data$strain == "G" |MLH1_data$strain == "LEWES"),]
Musc <- MLH1_data[( MLH1_data$strain == "PWD" | MLH1_data$strain == "MSM"),]
Dom_Mouse_table <- subset(Mouse_table, strain == "WSB" | strain == "G" | strain == "LEWES")
Musc_Mouse_table <- subset(Mouse_table, strain == "PWD" | strain == "MSM")
Cast_Mouse_table <- subset(Mouse_table, strain == "CAST" | strain == "HMI")
nDomF_obs <- length(filter(Dom_Mouse_table, sex=="female")$mouse)
nDomM_obs<- length(filter(Dom_Mouse_table, sex=="male")$mouse)
nMuscF_obs<- length(filter(Musc_Mouse_table, sex=="female")$mouse)
nMuscM_obs<- length(filter(Musc_Mouse_table, sex=="male")$mouse)
Dom_strain_table <- subset(Strain_table, strain == "WSB" | strain == "G" | strain == "LEWES")
Musc_strain_table <- subset(Strain_table, strain == "PWD" | strain == "MSM")
Cast_strain_table <- subset(Strain_table, strain == "CAST" | strain == "HMI")
nDomM_strains = length(unique(filter(Dom_Mouse_table, sex=="male")$strain) )
nDomF_strains = length(unique(filter(Dom_Mouse_table, sex=="female")$strain) )
nMuscM_strains = length(unique(filter(Musc_Mouse_table, sex=="male")$strain) )
nMuscF_strains = length(unique(filter(Musc_Mouse_table, sex=="female")$strain) )
DomF_sd_of_means <- sapply(subset(Dom_strain_table, sex=="female", select= strain.mean), sd)
names(DomF_sd_of_means) <- NULL
DomF_se_of_means <- (DomF_sd_of_means / sqrt(nDomF_strains) )
DomF_var_means <- sapply(subset(Musc_strain_table, sex=="male", select= strain.mean), var)
names(DomF_var_means) <- NULL
DomM_sd_of_means <- sapply(subset(Dom_strain_table, sex=="male", select= strain.mean), sd)
names(DomM_sd_of_means) <- NULL
DomM_se_of_means <- (DomM_sd_of_means / sqrt(nDomM_strains) )
DomM_var_means<- sapply(subset(Dom_strain_table, sex=="male", select= strain.mean), var)
names(DomM_var_means) <- NULL
MuscF_sd_of_means <- sapply(subset(Musc_strain_table, sex=="female", select= strain.mean), sd)
names(MuscF_sd_of_means) <- NULL
MuscF_se_of_means <- (MuscF_sd_of_means / sqrt(nMuscF_strains) )
MuscF_var_means <- sapply(subset(Musc_strain_table, sex=="male", select= strain.mean), var)
names(MuscF_var_means) <- NULL
MuscM_sd_of_means <- sapply(subset(Musc_strain_table, sex=="male", select= strain.mean), sd)
names(MuscM_sd_of_means) <- NULL
MuscM_se_of_means <- (MuscM_sd_of_means / sqrt(nMuscM_strains) )
MuscM_var_means <- sapply(subset(Musc_strain_table, sex=="male", select= strain.mean), var)
names(MuscM_var_means) <- NULL
Polymorphism_DF <- data.frame(subsp=c("Dom","Dom","Musc","Musc"),
n.strains = c(nDomF_strains, nDomM_strains,nMuscF_strains,nMuscM_strains),
n.mouse.obs = c(nDomF_obs,nDomM_obs,nMuscF_obs,nMuscM_obs),
sex= c("female", "male", "female", "male"),
SE.means= c(DomF_se_of_means, DomM_se_of_means, MuscF_se_of_means, MuscM_se_of_means))
Polymorphism_DF$SE.means <- as.character(Polymorphism_DF$SE.means)
Polymorphism_DF$SE.means <- as.numeric(Polymorphism_DF$SE.means)
DomF_sbsp_mean <- mean(as.numeric(subset(Dom_strain_table, sex=="female")$strain.mean) ) #mean( strain means)
DomM_sbsp_mean <- mean(as.numeric(subset(Dom_strain_table, sex=="male")$strain.mean) )
MuscF_sbsp_mean <- mean(as.numeric(subset(Musc_strain_table, sex=="female")$strain.mean) )
MuscM_sbsp_mean <- mean(as.numeric(subset(Musc_strain_table, sex=="male")$strain.mean) )
CastM_sbsp_mean <- mean(as.numeric(subset(Cast_strain_table, sex=="male")$strain.mean) )
HouseMusF_sp_mean <- mean(c(DomF_sbsp_mean,MuscF_sbsp_mean)) #female HM (missing cast)
HouseMusM_sp_mean <- mean(c(DomM_sbsp_mean,MuscM_sbsp_mean,CastM_sbsp_mean))
SpretM_sp_mean <- mean(as.numeric(subset(Strain_table, strain=="SPRET")$strain.mean) ) #not spret female measure yet
Div_FeDom.Musc_se <- ( sd(c(DomF_sbsp_mean, MuscF_sbsp_mean)) / sqrt(2) )
Div_MaMusc.Dom_se <- ( sd(c(DomM_sbsp_mean, MuscM_sbsp_mean)) / sqrt(2) )
Div_MaDom.Musc_se <- ( sd(c(MuscM_sbsp_mean, DomM_sbsp_mean)) / sqrt(2) )
Div_MaDom.Cast_se <- ( sd(c(DomM_sbsp_mean, CastM_sbsp_mean)) / sqrt(2) )
Div_MaMusc.Cast_se <- ( sd(c(MuscM_sbsp_mean, CastM_sbsp_mean)) / sqrt(2) )
Div_MaHM.Spret_se <- sd(c(HouseMusM_sp_mean, SpretM_sp_mean)) / sqrt(2)
Divergence_DF <- data.frame(
sex= c("female", "male", "female", "male","female", "male","female", "male","female", "male"),
Div_pair = c("Dom/Musc","Dom/Musc","Musc/Cast","Musc/Cast","Dom/Cast","Dom/Cast",
"HM/SPRET","HM/SPRET","HM/SPIC","HM/SPIC"
),
SE= c(Div_FeDom.Musc_se,Div_MaDom.Musc_se,
"NA",Div_MaMusc.Cast_se,
"NA",Div_MaDom.Cast_se,
"NA", Div_MaHM.Spret_se,
"NA","NA"))
Divergence_DF$SE <- as.character(Divergence_DF$SE)
Divergence_DF$SE <- as.numeric(Divergence_DF$SE)
Mouse_table
PnD_poold <- Mouse_table[!grepl("SPRET", Mouse_table$strain),]
PnD_poold <- PnD_poold[!grepl("SPIC", PnD_poold$strain),]
PnD_poold
